" Settings
colorscheme solarized
set number
syntax enable
set background=dark
set smartindent
set tabstop=4
set shiftwidth=4
set expandtab
set visualbell
set noerrorbells
set laststatus=2
set backspace+=start,eol,indent 
set cursorline
set autochdir

let g:ctrlp_custom_ignore = {
      \ 'dir':  '\.git$\|\.hg$\|\.svn$',
      \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }
let g:ctrlp_working_path_mode = 'ra'
nnoremap <silent> <D-t> :CtrlP<CR>
nnoremap <silent> <D-r> :CtrlPMRU<CR>
let g:ctrlp_user_command = {
      \ 'types': {
      \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
      \ 2: ['.hg', 'hg --cwd %s locate -I .'],
      \ },
      \ 'fallback': 'find %s -type f'
      \ }

let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme = 'airlineish'

let mapleader = ","
set clipboard=unnamed
set visualbell
set noerrorbells
set mouse=a
map <C-e> :NERDTreeToggle<CR>:NERDTreeMirror<CR>

let NERDTreeShowHidden=1
let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git$', '\.hg', '\.svn', '\.bzr', '\.DS_Store$']

" Close Nerdtree when last buffer
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" format the entire file
nnoremap <leader>fef :normal! gg=G``<CR>

nnoremap <silent> <leader>tt :TagbarToggle<CR>

" Wrapped lines goes down/up to next row, rather than next line in file.
noremap j gj
noremap k gk
inoremap kj <Esc>l
nmap <Space> i

map \|\| :so $MYVIMRC<CR>

" Window
map <C-J> <C-W>j<C-W>_
map <C-K> <C-W>k<C-W>_
map <C-L> <C-W>l<C-W>_
map <C-H> <C-W>h<C-W>_

" Buffers
noremap <leader>. :bn<CR>
noremap <leader>m :bp<CR>
noremap <leader>d :BufOnly<CR>

" Remember last cursor position
function! ResCur()
    if line("'\"") <= line("$")
        normal! g`"
        return 1
    endif
endfunction

augroup resCur
    autocmd!
    autocmd BufWinEnter * call ResCur()
augroup END

" filetypes
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,Procfile,Guardfile,config.ru,*.rake} set ft=ruby
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} setf markdown
au BufRead,BufNewFile *.{pro} set ft=prolog

" prevent ag terminal output
set shellpipe=>

" Fix path
set shell=/bin/bash
